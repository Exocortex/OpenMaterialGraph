shader DisneyPBR31
(
	float clearCoatWeight = 0.0,
	float clearCoatRoughness = 0.0,

	color baseColor = color(1.0,0.0,0.0),
	color specularColor = color(0.2,0.2,0.2),
	float ior = 1.5,
	float roughness = 0.0,
	float metallic = 0.0,
	color emissiveColor = color(0.0),

	output closure color Result = diffuse(0.8)

)



{
	float roughnessToGlossiness( float roughness ) {
		return 1.0 - roughness;
	}

	closure color glossy( vector n, float roughness, float au, float av ) {

		return microfacet_ggx( n, roughness, 1.5, "trace_reflections", 1 );
		//return vray_blinn( n, roughnessToGlossiness( roughness ), au, av, "trace_reflections", 1 );

	}

	color DielectricFresnel_Schlick( color F0, vector negI, vector n ) {

		float fresnel = pow( 1.0 - dot( negI, n ), 5.0 );
		return mix( F0, color( 1.0 ), fresnel );

	}

	closure color diffuseBRDF = diffuse(N, "trace_reflections", 1);
	color diffuseCoefficient = mix( baseColor, color( 0.0 ), metallic ) * ( 1.0 / M_PI );

	closure color glossyBRDF = glossy( N, roughness, 0.0, 0.0 );
	color glossyCoefficient = mix( DielectricFresnel_Schlick( specularColor, -I, N ), baseColor, metallic );

	closure color clearCoatBRDF = glossy( N, clearCoatRoughness, 0.0, 0.0 );
	color clearCoatCoefficient = DielectricFresnel_Schlick( color( clearCoatWeight ), -I, N );

	closure color e = emissiveColor * emission();

	//Result = sf * diffuse(N, "trace_reflections", 1);
    //Result = ( d * ( color( 1.0 ) - sf ) + sf * s ) * ( color( 1.0) - cf ) + cf * c + e;
    Result =
    	diffuseBRDF * diffuseCoefficient +
    	glossyBRDF * glossyCoefficient +
    	clearCoatBRDF * clearCoatCoefficient +
    	emissiveBRDF * emissiveCoefficient;

}